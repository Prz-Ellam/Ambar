using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ambar.Model.DAO
{
    class TestDAO : CassandraConnection
    {
        public void Restart()
        {
			/*
            string query1 = "DROP TABLE IF EXISTS CONTRACTS;";

			string query2 = @"CREATE TABLE IF NOT EXISTS CONTRACTS(
								CONTRACT_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								CLIENT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								START_PERIOD_DATE DATE,
								CREATED_AT TIMESTAMP,
								PRIMARY KEY (CONTRACT_ID)
							);";


			string query3 = "DROP TABLE IF EXISTS CONTRACTS_BY_METER_SERIAL_NUMBER;";

			string query4 = @"CREATE TABLE IF NOT EXISTS CONTRACTS_BY_METER_SERIAL_NUMBER(
								CONTRACT_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								CLIENT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								START_PERIOD_DATE DATE,
								CREATED_AT TIMESTAMP,
								PRIMARY KEY (METER_SERIAL_NUMBER)
							);";

			string query5 = "CREATE INDEX ON CONTRACTS_BY_METER_SERIAL_NUMBER(SERVICE_NUMBER);";

			string query6 = "DROP TABLE IF EXISTS CONTRACTS_BY_SERVICE;";

			string query7 = @"CREATE TABLE IF NOT EXISTS CONTRACTS_BY_SERVICE(
								CONTRACT_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								CLIENT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								START_PERIOD_DATE DATE,
								CREATED_AT TIMESTAMP,
								PRIMARY KEY (SERVICE, METER_SERIAL_NUMBER)
							) WITH CLUSTERING ORDER BY (METER_SERIAL_NUMBER ASC);";

			string query8 = "DROP TABLE IF EXISTS CLIENT_CONTRACTS;";

			string query9 = @"CREATE TABLE IF NOT EXISTS CLIENT_CONTRACTS(
								CONTRACT_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								CLIENT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								START_PERIOD_DATE DATE,
								CREATED_AT TIMESTAMP,
								PRIMARY KEY (CLIENT_ID, START_PERIOD_DATE, CONTRACT_ID)
							) WITH CLUSTERING ORDER BY (START_PERIOD_DATE DESC, CONTRACT_ID ASC);";

			string query10 = "DROP TABLE IF EXISTS RATES;";

			string query11 = @"CREATE TABLE IF NOT EXISTS RATES(
								RATE_ID UUID,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								SERVICE VARCHAR,
								YEAR INT,
								MONTH SMALLINT,
								PRIMARY KEY (RATE_ID)
							);";

			string query12 = "DROP TABLE IF EXISTS RATES_BY_YEAR;";

			string query13 = @"CREATE TABLE IF NOT EXISTS RATES_BY_YEAR(
								RATE_ID UUID,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								SERVICE VARCHAR,
								YEAR INT,
								MONTH SMALLINT,
								PRIMARY KEY (YEAR, MONTH, SERVICE, RATE_ID)
							) WITH CLUSTERING ORDER BY (MONTH ASC, SERVICE ASC, RATE_ID ASC);";

			string query14 = "DROP TABLE IF EXISTS RATES_ACTIVE;";

			string query15 = @"CREATE TABLE IF NOT EXISTS RATES_ACTIVE(
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								SERVICE VARCHAR,
								YEAR INT,
								MONTH SMALLINT,
								PRIMARY KEY ((YEAR, MONTH, SERVICE))
							);";

			string query16 = "DROP TABLE IF EXISTS CONSUMPTIONS;";

			string query17 = @"CREATE TABLE IF NOT EXISTS CONSUMPTIONS(
								CONSUMPTION_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								PRIMARY KEY (CONSUMPTION_ID)
							);";

			string query18 = "DROP TABLE IF EXISTS CONSUMPTIONS_BY_YEAR;";

			string query19 = @"CREATE TABLE IF NOT EXISTS CONSUMPTIONS_BY_YEAR(
								CONSUMPTION_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								PRIMARY KEY (YEAR, MONTH, METER_SERIAL_NUMBER)
							) WITH CLUSTERING ORDER BY (MONTH ASC, METER_SERIAL_NUMBER ASC);";

			string query20 = "DROP TABLE IF EXISTS CONSUMPTIONS_BY_METER_SERIAL_NUMBER;";

			string query21 = @"CREATE TABLE IF NOT EXISTS CONSUMPTIONS_BY_METER_SERIAL_NUMBER(
								CONSUMPTION_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								PRIMARY KEY (METER_SERIAL_NUMBER, YEAR, MONTH)
							) WITH CLUSTERING ORDER BY (YEAR ASC, MONTH ASC);";

			string query22 = "DROP TABLE IF EXISTS CONSUMPTIONS_BY_SERVICE_NUMBER;";

			string query23 = @"CREATE TABLE IF NOT EXISTS CONSUMPTIONS_BY_SERVICE_NUMBER(
								CONSUMPTION_ID UUID,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								PRIMARY KEY (SERVICE_NUMBER, YEAR, MONTH)
							) WITH CLUSTERING ORDER BY (YEAR ASC, MONTH ASC);";

			string query24 = "DROP TABLE IF EXISTS RECEIPT;";

			string query25 = @"CREATE TABLE IF NOT EXISTS RECEIPT(
								RECEIPT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								BASIC_PRICE DECIMAL,
								INTERMEDIATE_PRICE DECIMAL,
								SURPLUS_PRICE DECIMAL,
								SUBTOTAL_PRICE DECIMAL,
								TAX DECIMAL,
								PREV_AMOUNT DECIMAL,
								PREV_PRICE DECIMAL,
								TOTAL_PRICE DECIMAL,
								AMOUNT_PAD DECIMAL,
								PENDING_AMOUNT DECIMAL,
								PAYMENT_HISTORY MAP<TIMESTAMP, DECIMAL>,
								PAYMENT_TYPE_HISTORY LIST<VARCHAR>,
								IS_PAID BOOLEAN,
								PRIMARY KEY (RECEIPT_ID)
							);";

			string query26 = "DROP TABLE IF EXISTS RECEIPT_BY_METER_SERIAL_NUMBER;";

			string query27 = @"CREATE TABLE IF NOT EXISTS RECEIPT_BY_METER_SERIAL_NUMBER(
								RECEIPT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								BASIC_PRICE DECIMAL,
								INTERMEDIATE_PRICE DECIMAL,
								SURPLUS_PRICE DECIMAL,
								SUBTOTAL_PRICE DECIMAL,
								TAX DECIMAL,
								PREV_AMOUNT DECIMAL,
								PREV_PRICE DECIMAL,
								TOTAL_PRICE DECIMAL,
								AMOUNT_PAD DECIMAL,
								PENDING_AMOUNT DECIMAL,
								PAYMENT_HISTORY MAP<TIMESTAMP, DECIMAL>,
								PAYMENT_TYPE_HISTORY LIST<VARCHAR>,
								IS_PAID BOOLEAN,
								PRIMARY KEY (METER_SERIAL_NUMBER, YEAR, MONTH)
							) WITH CLUSTERING ORDER BY (YEAR ASC, MONTH ASC);";

			string query28 = "DROP TABLE IF EXISTS RECEIPT_BY_SERVICE_NUMBER;";

			string query29 = @"CREATE TABLE IF NOT EXISTS RECEIPT_BY_SERVICE_NUMBER(
								RECEIPT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								BASIC_PRICE DECIMAL,
								INTERMEDIATE_PRICE DECIMAL,
								SURPLUS_PRICE DECIMAL,
								SUBTOTAL_PRICE DECIMAL,
								TAX DECIMAL,
								PREV_AMOUNT DECIMAL,
								PREV_PRICE DECIMAL,
								TOTAL_PRICE DECIMAL,
								AMOUNT_PAD DECIMAL,
								PENDING_AMOUNT DECIMAL,
								PAYMENT_HISTORY MAP<TIMESTAMP, DECIMAL>,
								PAYMENT_TYPE_HISTORY LIST<VARCHAR>,
								IS_PAID BOOLEAN,
								PRIMARY KEY (SERVICE_NUMBER, YEAR, MONTH)
							) WITH CLUSTERING ORDER BY (YEAR ASC, MONTH ASC);";

			string query30 = "DROP TABLE IF EXISTS RECEIPT_BY_YEAR;";

			string query31 = @"CREATE TABLE IF NOT EXISTS RECEIPT_BY_YEAR(
								RECEIPT_ID UUID,
								FIRST_NAME VARCHAR,
								FATHER_LAST_NAME VARCHAR,
								MOTHER_LAST_NAME VARCHAR,
								STATE VARCHAR,
								CITY VARCHAR,
								SUBURB VARCHAR,
								STREET VARCHAR,
								NUMBER VARCHAR,
								POSTAL_CODE VARCHAR,
								SERVICE VARCHAR,
								METER_SERIAL_NUMBER VARCHAR,
								SERVICE_NUMBER BIGINT,
								YEAR INT,
								MONTH SMALLINT,
								DAY SMALLINT,
								BASIC_LEVEL DECIMAL,
								INTERMEDIATE_LEVEL DECIMAL,
								SURPLUS_LEVEL DECIMAL,
								BASIC_KW DECIMAL,
								INTERMEDIATE_KW DECIMAL,
								SURPLUS_KW DECIMAL,
								TOTAL_KW DECIMAL,
								BASIC_PRICE DECIMAL,
								INTERMEDIATE_PRICE DECIMAL,
								SURPLUS_PRICE DECIMAL,
								SUBTOTAL_PRICE DECIMAL,
								TAX DECIMAL,
								PREV_AMOUNT DECIMAL,
								PREV_PRICE DECIMAL,
								TOTAL_PRICE DECIMAL,
								AMOUNT_PAD DECIMAL,
								PENDING_AMOUNT DECIMAL,
								PAYMENT_HISTORY MAP<TIMESTAMP, DECIMAL>,
								PAYMENT_TYPE_HISTORY LIST<VARCHAR>,
								IS_PAID BOOLEAN,
								PRIMARY KEY (YEAR, MONTH, SERVICE, RECEIPT_ID)
							) WITH CLUSTERING ORDER BY (MONTH ASC, SERVICE ASC, RECEIPT_ID ASC);";

			string query32 = "DROP TABLE IF EXISTS EMIT_RECEIPT;";

			string query33 = @"CREATE TABLE IF NOT EXISTS EMIT_RECEIPT(
								YEAR INT,
								MONTH SMALLINT,
								SERVICE VARCHAR,
								PRIMARY KEY ((YEAR, MONTH, SERVICE))
							);";

			string query34 = "DROP TABLE IF EXISTS DATES;";

			string query35 = @"CREATE TABLE IF NOT EXISTS DATES(
								ID INT,
								ACTUAL_DATE DATE,
								INITIAL BOOLEAN,
								PRIMARY KEY (ID)
							);";


			session.Execute(query1);
			session.Execute(query2); 
			session.Execute(query3);
			session.Execute(query4);
			session.Execute(query5);
			session.Execute(query6);
			session.Execute(query7);
			session.Execute(query8); 
			session.Execute(query9);
			session.Execute(query10);
			session.Execute(query11);
			session.Execute(query12); 
			session.Execute(query13);
			session.Execute(query14);
			session.Execute(query15);
			session.Execute(query16);
			session.Execute(query17);
			session.Execute(query18);
			session.Execute(query19);
			session.Execute(query20);
			session.Execute(query21);
			session.Execute(query22); 
			session.Execute(query23);
			session.Execute(query24);
			session.Execute(query25);
			session.Execute(query26);
			session.Execute(query27);
			session.Execute(query28);
			session.Execute(query29);
			session.Execute(query30);
			session.Execute(query31);
			session.Execute(query32);
			session.Execute(query33);
			session.Execute(query34);
			session.Execute(query35);
			*/
			string tQuery1 = "TRUNCATE EMPLOYEES;";
			string tQuery2 = "TRUNCATE EMPLOYEES_LOGIN;";
			string tQuery3 = "TRUNCATE EMPLOYEES_ENABLED;";
			string tQuery4 = "TRUNCATE CLIENTS;";
			string tQuery5 = "TRUNCATE CLIENTS_LOGIN;";
			string tQuery6 = "TRUNCATE CLIENTS_ENABLED;";
			string tQuery7 = "TRUNCATE USERS_REMEMBER;";
			string tQuery8 = "TRUNCATE CONTRACTS;";
			string tQuery9 = "TRUNCATE CONTRACTS_BY_METER_SERIAL_NUMBER;";
			string tQuery10 = "TRUNCATE CONTRACTS_BY_SERVICE;";
			string tQuery11 = "TRUNCATE CLIENT_CONTRACTS;";
			string tQuery12 = "TRUNCATE RATES;";
			string tQuery13 = "TRUNCATE RATES_BY_YEAR;";
			string tQuery14 = "TRUNCATE RATES_ACTIVE;";
			string tQuery15 = "TRUNCATE CONSUMPTIONS;";
			string tQuery16 = "TRUNCATE CONSUMPTIONS_BY_YEAR;";
			string tQuery17 = "TRUNCATE CONSUMPTIONS_BY_METER_SERIAL_NUMBER;";
			string tQuery18 = "TRUNCATE CONSUMPTIONS_BY_SERVICE_NUMBER;";
			string tQuery19 = "TRUNCATE DATES;";
			string tQuery20 = "TRUNCATE RECEIPT;";
			string tQuery21 = "TRUNCATE RECEIPT_BY_METER_SERIAL_NUMBER;";
			string tQuery22 = "TRUNCATE RECEIPT_BY_SERVICE_NUMBER;";
			string tQuery23 = "TRUNCATE RECEIPT_BY_YEAR;";
			string tQuery24 = "TRUNCATE EMIT_RECEIPT;";
			string tQuery25 = "TRUNCATE ACTIVITY";

			session.Execute(tQuery1);
			session.Execute(tQuery2); 
			session.Execute(tQuery3);
			session.Execute(tQuery4);
			session.Execute(tQuery5);
			session.Execute(tQuery6);
			session.Execute(tQuery7);
			session.Execute(tQuery8);
			session.Execute(tQuery9);
			session.Execute(tQuery10);
			session.Execute(tQuery11);
			session.Execute(tQuery12);
			session.Execute(tQuery13);
			session.Execute(tQuery14);
			session.Execute(tQuery15);
			session.Execute(tQuery16);
			session.Execute(tQuery17);
			session.Execute(tQuery18);
			session.Execute(tQuery19);
			session.Execute(tQuery20);
			session.Execute(tQuery21);
			session.Execute(tQuery22);
			session.Execute(tQuery23);
			session.Execute(tQuery24);
			session.Execute(tQuery25);


		}
	}
}
