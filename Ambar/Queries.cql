
-- Login Administrador 
SELECT USER_NAME, PASSWORD FROM ADMINISTRATORS_LOGIN WHERE USER_NAME = '{0}' AND PASSWORD = '{1}';



-- Insertar Empleados
BEGIN BATCH
INSERT INTO EMPLOYEES(USER_ID, USER_NAME, PASSWORD, CREATED_AT, MODIFICATE_AT, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, DATE_OF_BIRTH, RFC, CURP) VALUES(uuid(), ?, ?, toUnixTimestamp(now()), [ toUnixTimestamp(now()) ], ?, ?, ?, ?, ?, ?);
INSERT INTO EMPLOYEES_LOGIN(USER_NAME, PASSWORD, ENABLED) VALUES(?, ?, TRUE);
INSERT INTO EMPLOYEES_ENABLED(USER_NAME, ENABLED) VALUES(?, TRUE);
APPLY BATCH;



-- Editar empleados
SELECT ENABLED FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';

UPDATE EMPLOYEES SET USER_NAME = '{0}', PASSWORD = '{1}', FIRST_NAME = '{2}', FATHER_LAST_NAME = '{3}', MOTHER_LAST_NAME = '{4}', DATE_OF_BIRTH = '{5}', RFC = '{6}', CURP = '{7}', MODIFICATE_AT = MODIFICATE_AT + [ toUnixTimestamp(now()) ] WHERE USER_ID = {8};
DELETE FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';
INSERT INTO EMPLOYEES_LOGIN(USER_NAME, PASSWORD, ENABLED) VALUES('{0}', '{1}', {2});
DELETE FROM EMPLOYEES_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';
INSERT INTO EMPLOYEES_ENABLED(USER_NAME, ENABLED) VALUES('{0}', {1});



-- Borrar empleados
SELECT ENABLED FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';
DELETE FROM EMPLOYEES WHERE USER_ID = {0};
DELETE FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';
DELETE FROM EMPLOYEES_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';



-- Leer empleados
SELECT USER_ID, USER_NAME, PASSWORD, CREATED_AT, MODIFICATE_AT, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, DATE_OF_BIRTH, RFC, CURP FROM EMPLOYEES;



-- Habilitar / deshabilitar empleado
UPDATE EMPLOYEES_LOGIN SET ENABLED = {0} WHERE USER_NAME = '{1}';
DELETE FROM EMPLOYEES_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';
INSERT INTO EMPLOYEES_ENABLED(USER_NAME, ENABLED) VALUES('{0}', {1});



-- Login empleado
SELECT USER_NAME, PASSWORD, ENABLED FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}' AND PASSWORD = '{1}';



-- Leer todos los empleados deshabilitados
SELECT USER_NAME FROM EMPLOYEES_ENABLED WHERE ENABLED = FALSE;



-- Verificar si existe usuario
SELECT COUNT(USER_NAME) FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';
SELECT COUNT(USER_NAME) FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';
SELECT COUNT(USER_NAME) FROM ADMINISTRATORS_LOGIN WHERE USER_NAME = '{0}';



-- Si existe empleado
SELECT COUNT(USER_NAME) FROM EMPLOYEES_LOGIN WHERE USER_NAME = '{0}';



-- Insertar clientes
BEGIN BATCH
INSERT INTO CLIENTS(USER_ID, USER_NAME, PASSWORD, CREATED_AT, MODIFICATE_AT, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, DATE_OF_BIRTH, CURP, GENDER) VALUES(?, ?, ?, toUnixTimestamp(now()), [ toUnixTimestamp(now()) ], ?, ?, ?, ?, ?, ?);
INSERT INTO CLIENTS_LOGIN(USER_NAME, PASSWORD, ENABLED) VALUES(?, ?, true);
INSERT INTO CLIENTS_ENABLED(USER_NAME, ENABLED) VALUES(?, true);
APPLY BATCH;



-- Actualizar clientes
SELECT ENABLED FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';

UPDATE CLIENTS SET USER_NAME = '{0}', PASSWORD = '{1}', FIRST_NAME = '{2}', FATHER_LAST_NAME = '{3}', MOTHER_LAST_NAME = '{4}', DATE_OF_BIRTH = '{5}', CURP = '{6}', GENDER = '{7}', MODIFICATE_AT = MODIFICATE_AT + [ toUnixTimestamp(now()) ] WHERE USER_ID = {8};
UPDATE CLIENTS SET EMAILS = {'0'} WHERE USER_ID = '{0}';

DELETE FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';
INSERT INTO CLIENTS_LOGIN(USER_NAME, PASSWORD, ENABLED) VALUES('{0}', '{1}', {2});
DELETE FROM CLIENTS_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';
INSERT INTO CLIENTS_ENABLED(USER_NAME, ENABLED) VALUES('{0}', {1});



-- Borrar clientes
SELECT ENABLED FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';
DELETE FROM CLIENTS WHERE USER_ID = {0};
DELETE FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';
DELETE FROM CLIENTS_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';



-- Leer clientes
SELECT USER_ID, USER_NAME, PASSWORD, CREATED_AT, MODIFICATE_AT, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, DATE_OF_BIRTH, EMAILS, CURP, GENDER FROM CLIENTS;



-- Leer clientes deshabilitados
SELECT USER_NAME FROM CLIENTS_ENABLED WHERE ENABLED = FALSE;



-- Login cliente
SELECT USER_NAME, PASSWORD, ENABLED FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}' AND PASSWORD = '{1}';



-- Habilitar / deshabilitar cliente
UPDATE CLIENTS_LOGIN SET ENABLED = {0} WHERE USER_NAME = '{1}';
DELETE FROM CLIENTS_ENABLED WHERE ENABLED = {0} AND USER_NAME = '{1}';
INSERT INTO CLIENTS_ENABLED(USER_NAME, ENABLED) VALUES('{0}', {1});



-- Si existe cliente
SELECT COUNT(USER_NAME) FROM CLIENTS_LOGIN WHERE USER_NAME = '{0}';



-- Leer todos los usernames y IDs de clientes
SELECT USER_ID, USER_NAME FROM CLIENTS;



-- Insertar contrato
BEGIN BATCH
INSERT INTO CONTRACTS(CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, toUnixTimestamp(now()), ?);
INSERT INTO CONTRACTS_BY_METER_SERIAL_NUMBER(CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, toUnixTimestamp(now()), ?);
INSERT INTO CONTRACTS_BY_SERVICE(CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, toUnixTimestamp(now()), ?);
APPLY BATCH;



-- Actualizar informacion del cliente en el contrato
SELECT CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, START_PERIOD_DATE, SERVICE FROM CLIENT_CONTRACTS WHERE CLIENT_ID = {0};

UPDATE CONTRACTS SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE CONTRACT_ID = {3};
UPDATE CONTRACTS_BY_SERVICE SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE SERVICE = '{3}' AND METER_SERIAL_NUMBER = '{4}';
UPDATE CONTRACTS_BY_METER_SERIAL_NUMBER SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE METER_SERIAL_NUMBER = '{3}';
UPDATE CLIENT_CONTRACTS SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE CLIENT_ID = {3} AND START_PERIOD_DATE = '{4}' AND CONTRACT_ID = {5};



-- Leer contratos
SELECT CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE, CREATED_AT FROM CONTRACTS_BY_SERVICE;



-- Leer contratos de un cliente
SELECT CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE, CREATED_AT FROM CLIENT_CONTRACTS WHERE CLIENT_ID = {0};



-- Verificar si un contrato existe por numero de servicio
SELECT COUNT(SERVICE_NUMBER) FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE SERVICE_NUMBER = {0};



-- Verificar si un contrato existe por numero de medidor
SELECT COUNT(METER_SERIAL_NUMBER) FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Encontrar tipo de servicio por numero de medidor
SELECT SERVICE FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Encontrar tipo de servicio por numero de servicio
SELECT SERVICE FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE SERVICE_NUMBER = {0} ALLOW FILTERING;



-- Encontrar el periodo de inicio de un contrato
SELECT START_PERIOD_DATE FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Encontrar el numero de servicio por numero de medidor
SELECT SERVICE_NUMBER FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Encontrar el ID de un contrato por numero de medidor
SELECT CONTRACT_ID FROM CONTRACTS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Leer todos los contratos por servicio
SELECT CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, STATE, CITY, SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, CLIENT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, CREATED_AT, START_PERIOD_DATE, CREATED_AT FROM CONTRACTS_BY_SERVICE WHERE SERVICE = '{0}';



-- Verificar si el contrato existe
SELECT COUNT(CONTRACT_ID) FROM CLIENT_CONTRACTS WHERE CLIENT_ID = {0};
SELECT COUNT(CLIENT_ID) FROM CLIENT_CONTRACTS WHERE CLIENT_ID = {0} AND METER_SERIAL_NUMBER = '{1}' ALLOW FILTERING;
SELECT COUNT(CLIENT_ID) FROM CLIENT_CONTRACTS WHERE CLIENT_ID = {0} AND SERVICE_NUMBER = {1} ALLOW FILTERING;



-- Insertar tarifas
BEGIN BATCH
INSERT INTO RATES(RATE_ID, BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH) VALUES(?, ?, ?, ?, ?, ?, ?);
INSERT INTO RATES_BY_YEAR(RATE_ID, BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH) VALUES(?, ?, ?, ?, ?, ?, ?);
APPLY BATCH

SELECT COUNT(YEAR) FROM RATES_ACTIVE WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = '{2}';
UPDATE RATES_ACTIVE SET BASIC_LEVEL = {0}, INTERMEDIATE_LEVEL = {1}, SURPLUS_LEVEL = {2} WHERE SERVICE = '{3}' AND YEAR = {4} AND MONTH = {5};
INSERT INTO RATES_ACTIVE(BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH) VALUES({0}, {1}, {2}, '{3}', {4}, {5});



-- Encontrar tarifas activas
SELECT BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH FROM RATES_ACTIVE WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = '{2}';



-- Leer tarifas
SELECT RATE_ID, BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH FROM RATES;



-- Leer tarifas por a√±o
SELECT RATE_ID, BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, SERVICE, YEAR, MONTH FROM RATES_BY_YEAR WHERE YEAR = {0};



-- Insertar consumo
BEGIN BATCH
INSERT INTO CONSUMPTIONS(CONSUMPTION_ID, CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT INTO CONSUMPTIONS_BY_YEAR(CONSUMPTION_ID, CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT INTO CONSUMPTIONS_BY_METER_SERIAL_NUMBER(CONSUMPTION_ID, CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT INTO CONSUMPTIONS_BY_SERVICE_NUMBER(CONSUMPTION_ID, CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
APPLY BATCH;



-- Leer consumos
SELECT CONSUMPTION_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY FROM CONSUMPTIONS;



-- Leer consumos por a√±o
SELECT CONSUMPTION_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH FROM CONSUMPTIONS_BY_YEAR WHERE YEAR = {0};



-- Consumo existe
SELECT COUNT(YEAR) FROM CONSUMPTIONS_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}' AND YEAR = {1} AND MONTH = {2};



-- Buscar consumo
SELECT CONSUMPTION_ID, CONTRACT_ID, METER_SERIAL_NUMBER, SERVICE_NUMBER, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, YEAR, MONTH, DAY FROM CONSUMPTIONS_BY_YEAR WHERE YEAR = {0} AND MONTH = {1} AND METER_SERIAL_NUMBER = '{2}';



-- Insertar recibo
BEGIN BATCH
INSERT INTO RECEIPT(RECEIPT_ID, CONTRACT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY,
                SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY,  
	            BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, 
	            BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, PREV_AMOUNT, PREV_PRICE, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT, 
                PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, IS_PAID) 
                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, { toUnixTimestamp(now()) : 0 }, ['Default'], ?);
INSERT INTO RECEIPT_BY_METER_SERIAL_NUMBER(RECEIPT_ID, CONTRACT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY,
                SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY,  
	            BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, 
	            BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, PREV_AMOUNT, PREV_PRICE, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT, 
                PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, IS_PAID) 
                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, { toUnixTimestamp(now()) : 0 }, ['Default'], ?);
INSERT INTO RECEIPT_BY_SERVICE_NUMBER(RECEIPT_ID, CONTRACT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY,
                SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY, 
	            BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, 
	            BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, PREV_AMOUNT, PREV_PRICE, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT, 
                PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, IS_PAID) 
                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, { toUnixTimestamp(now()) : 0 }, ['Default'], ?);
INSERT INTO RECEIPT_BY_YEAR(RECEIPT_ID, CONTRACT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY,
                SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY, 
	            BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, 
	            BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, PREV_AMOUNT, PREV_PRICE, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT,
                PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, IS_PAID) 
                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, { toUnixTimestamp(now()) : 0 }, ['Default'], ?);
APPLY BATCH;



-- Emitir periodo de recibos
INSERT INTO EMIT_RECEIPT(YEAR, MONTH, SERVICE) VALUES({0}, {1}, '{2}');



-- Buscar emision
SELECT COUNT(YEAR) FROM EMIT_RECEIPT WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = '{2}';



-- Recibo existe
SELECT COUNT(RECEIPT_ID) FROM RECEIPT_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}' AND YEAR = {1} AND MONTH = {2};



-- Buscar recibo por numero de medidor
SELECT RECEIPT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY, " +
            "SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY, " +
            "BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, " +
            "BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT, " +
            "IS_PAID, PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, PREV_AMOUNT, PREV_PRICE " +
            "FROM RECEIPT_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}' AND YEAR = {1} AND MONTH = {2};



-- Buscar recibo por numero de servicio
SELECT RECEIPT_ID, FIRST_NAME, FATHER_LAST_NAME, MOTHER_LAST_NAME, STATE, CITY, " +
            "SUBURB, STREET, NUMBER, POSTAL_CODE, SERVICE, METER_SERIAL_NUMBER, SERVICE_NUMBER, YEAR, MONTH, DAY, " +
            "BASIC_LEVEL, INTERMEDIATE_LEVEL, SURPLUS_LEVEL, BASIC_KW, INTERMEDIATE_KW, SURPLUS_KW, TOTAL_KW, " +
            "BASIC_PRICE, INTERMEDIATE_PRICE, SURPLUS_PRICE, SUBTOTAL_PRICE, TAX, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT, " +
            "IS_PAID, PAYMENT_HISTORY, PAYMENT_TYPE_HISTORY, PREV_AMOUNT, PREV_PRICE " +
            "FROM RECEIPT_BY_SERVICE_NUMBER WHERE SERVICE_NUMBER = {0} AND YEAR = {1} AND MONTH = {2};



-- Reporte general
SELECT YEAR, MONTH, SERVICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_YEAR WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = '{2}';

SELECT YEAR, MONTH, SERVICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_YEAR WHERE YEAR = {0} AND MONTH = {1};

SELECT YEAR, MONTH, SERVICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_YEAR WHERE YEAR = {0} AND SERVICE = '{1}' ALLOW FILTERING;

SELECT YEAR, MONTH, SERVICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_YEAR WHERE YEAR = {0};



-- Consumo historico
SELECT YEAR, MONTH, SERVICE, TOTAL_KW, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}' AND YEAR = {1};

SELECT YEAR, MONTH, SERVICE, TOTAL_KW, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_SERVICE_NUMBER WHERE SERVICE_NUMBER = {0} AND YEAR = {1};

SELECT YEAR, MONTH, SERVICE, TOTAL_KW, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_SERVICE_NUMBER WHERE SERVICE_NUMBER = {0};

SELECT YEAR, MONTH, SERVICE, TOTAL_KW, TOTAL_PRICE, AMOUNT_PAID, PENDING_AMOUNT FROM RECEIPT_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';



-- Pagar recibo
UPDATE RECEIPT SET AMOUNT_PAID = {0}, PENDING_AMOUNT = {1}, 
                PAYMENT_HISTORY = PAYMENT_HISTORY + {{  toUnixTimestamp(now()) : {2} }}, 
                PAYMENT_TYPE_HISTORY = PAYMENT_TYPE_HISTORY + ['{3}'], IS_PAID = {4} WHERE RECEIPT_ID = {5};
UPDATE RECEIPT_BY_METER_SERIAL_NUMBER SET AMOUNT_PAID = {0}, PENDING_AMOUNT = {1}, 
                PAYMENT_HISTORY = PAYMENT_HISTORY + {{  toUnixTimestamp(now()) : {2} }}, 
                PAYMENT_TYPE_HISTORY = PAYMENT_TYPE_HISTORY + ['{3}'], IS_PAID = {4} WHERE METER_SERIAL_NUMBER = '{5}'
                AND YEAR = {6} AND MONTH = {7};
UPDATE RECEIPT_BY_SERVICE_NUMBER SET AMOUNT_PAID = {0}, PENDING_AMOUNT = {1}, 
                PAYMENT_HISTORY = PAYMENT_HISTORY + {{  toUnixTimestamp(now()) : {2} }}, 
                PAYMENT_TYPE_HISTORY = PAYMENT_TYPE_HISTORY + ['{3}'], IS_PAID = {4} WHERE SERVICE_NUMBER = {5}
                AND YEAR = {6} AND MONTH = {7};
UPDATE RECEIPT_BY_YEAR SET AMOUNT_PAID = {0}, PENDING_AMOUNT = {1}, 
                PAYMENT_HISTORY = PAYMENT_HISTORY + {{  toUnixTimestamp(now()) : {2} }}, 
                PAYMENT_TYPE_HISTORY = PAYMENT_TYPE_HISTORY + ['{3}'], IS_PAID = {4} WHERE YEAR = {5} AND MONTH = {6} 
                AND SERVICE = '{7}' AND RECEIPT_ID = {8};



-- Actualizar informacion del cliente
SELECT RECEIPT_ID, YEAR, MONTH, SERVICE FROM RECEIPT_BY_METER_SERIAL_NUMBER WHERE METER_SERIAL_NUMBER = '{0}';

UPDATE RECEIPT SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE RECEIPT_ID = {3};
UPDATE RECEIPT_BY_METER_SERIAL_NUMBER SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE METER_SERIAL_NUMBER = '{3}' AND YEAR = {4} AND MONTH = {5};
UPDATE RECEIPT_BY_SERVICE_NUMBER SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE SERVICE_NUMBER = {3} AND YEAR = {4} AND MONTH = {5};
UPDATE RECEIPT_BY_YEAR SET FIRST_NAME = '{0}', FATHER_LAST_NAME = '{1}', MOTHER_LAST_NAME = '{2}' WHERE YEAR = {3} AND MONTH = {4} AND SERVICE = '{5}' AND RECEIPT_ID = {6};



-- Accion en la base de datos
INSERT INTO ACTIVITY(ACTIVITY_ID, USER_ID, ACTION, OFFSET) VALUES({0}, {1}, '{2}', toUnixTimestamp(now()));



-- Verificar si existe una fecha
SELECT COUNT(ID) FROM DATES;



-- Insertar fecha
INSERT INTO DATES(ID, INITIAL, ACTUAL_DATE) VALUES(0, true, '{0}');



-- Actualizar fecha
UPDATE DATES SET ACTUAL_DATE = '{0}', INITIAL = false WHERE ID = 0;
SELECT COUNT(YEAR) FROM EMIT_RECEIPT WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = 'Domestico';
SELECT COUNT(YEAR) FROM EMIT_RECEIPT WHERE YEAR = {0} AND MONTH = {1} AND SERVICE = 'Industrial';
UPDATE DATES SET ACTUAL_DATE = '{0}', INITIAL = false WHERE ID = 0;



-- Obtener fecha
SELECT ACTUAL_DATE FROM DATES WHERE ID = 0;



-- Obtener fecha inicial
SELECT INITIAL FROM DATES WHERE ID = 0;



-- Recordar contrase√±a
INSERT INTO USERS_REMEMBER(POSITION, USER_NAME, PASSWORD) VALUES('{0}', '{1}', '{2}');



-- Olvidar contrase√±a
DELETE FROM USERS_REMEMBER WHERE POSITION = '{0}' AND USER_NAME = '{1}';



-- Leer contrase√±a
SELECT PASSWORD FROM USERS_REMEMBER WHERE POSITION = '{0}' AND USER_NAME = '{1}';



-- Obtener usuarios con contrase√±a recordada
SELECT USER_NAME FROM USERS_REMEMBER;
SELECT USER_NAME FROM USERS_REMEMBER WHERE POSITION = '{0}';



-- Verificar si existe usuario que recuerda contrase√±a
SELECT COUNT(USER_NAME) FROM USERS_REMEMBER WHERE POSITION = '{0}' AND USER_NAME = '{1}';



-- Obtener ID de usuario
SELECT USER_ID FROM ADMINISTRATORS WHERE USER_NAME = '{0}' ALLOW FILTERING;
SELECT USER_ID FROM EMPLOYEES WHERE USER_NAME = '{0}' ALLOW FILTERING;
SELECT USER_ID FROM CLIENTS WHERE USER_NAME = '{0}' ALLOW FILTERING;